# -*- coding: utf-8 -*-
"""file(RT).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dpHfxkoipAY9QB3136V4ULEnIcVW0S41
"""

from google.colab import drive
drive.mount('/content/drive')

import platform
print(platform.python_version())

import tensorflow as tf

from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Sequential, load_model, save_model,Model
from tensorflow.keras.optimizers import Adam
import numpy as np 
import re

tokenizer = Tokenizer(oov_token = "OOV")

whole_text = open("/content/drive/MyDrive/Bangla_Text_Generation/Dataset/Untitled folder/Rabindranath_2.txt").read().lower()
whole_text  = whole_text.replace("\n", " ") 

whole_text  = whole_text.replace(",", " ,") 
whole_text  = whole_text.replace("।", " ।") 
whole_text  = whole_text.replace("?", " ?") 
whole_text  = whole_text.replace("!", " !") 
whole_text  = whole_text.replace("-", " - ") 

whole_text  = whole_text.replace("‘", "") 
whole_text  = whole_text.replace("’", "") 

whole_text  = re.sub(r'[" "]+', " ", whole_text)
whole_text  = whole_text.strip()

print(whole_text)

# cut the text in semi-redundant sequences of maxlen words
maxlen = 40
step = 10
corpus = []
wordlist = whole_text.split(" ")
for i in range(0, len(wordlist) - maxlen, step):
    corpus.append(" ".join(wordlist[i : i + maxlen]))

tokenizer.fit_on_texts(corpus)
total_words = len(tokenizer.word_index) + 1

print(tokenizer.word_index)
print(total_words)

print(len(corpus))

print(corpus[0])

token_list = tokenizer.texts_to_sequences([corpus[0]])[0]
print(token_list)

token_list = tokenizer.texts_to_sequences([corpus[0]])[0]
for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i+1]
    print(n_gram_sequence)

input_sequences = []
for line in corpus:
  token_list = tokenizer.texts_to_sequences([line])[0]
  for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i+1]
    input_sequences.append(n_gram_sequence)

# pad sequences 
max_sequence_len = max([len(x) for x in input_sequences])
input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))

print(len(input_sequences))
# create predictors and label
xs, labels = input_sequences[:,:-1],input_sequences[:,-1]

ys = tf.keras.utils.to_categorical(labels, num_classes=total_words)

BUFFER_SIZE = 256
BATCH_SIZE = 64
steps_per_epoch = len(xs)//BATCH_SIZE

dataset = tf.data.Dataset.from_tensor_slices((xs, ys)).shuffle(BUFFER_SIZE)
dataset = dataset.batch(BATCH_SIZE, drop_remainder=True)

import pickle
import tempfile
def make_keras_picklable():
    def __getstate__(self):
        model_str = ""
        with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
            save_model(self, fd.name, overwrite=True)
            model_str = fd.read()
        d = {'model_str': model_str}
        return d

    def __setstate__(self, state):
        with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
            fd.write(state['model_str'])
            fd.flush()
            model = load_model(fd.name)
        self.__dict__ = model.__dict__


    cls = Model
    cls.__getstate__ = __getstate__
    cls.__setstate__ = __setstate__

make_keras_picklable()

model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len-1))
model.add(Bidirectional(LSTM(150)))
model.add(Dense(total_words, activation='softmax'))
adam = Adam(lr=0.01)
model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])
#earlystop = EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto')
#print model.summary()
# print(model)

model.summary()

history = model.fit(dataset, epochs=100, verbose=1)

import matplotlib.pyplot as plt


def plot_graphs(history, string):
  plt.plot(history.history[string])
  plt.xlabel("Epochs")
  plt.ylabel(string)
  plt.show()

plot_graphs(history, 'accuracy')

plot_graphs(history, 'loss')

model.save("/content/drive/MyDrive/Bangla_Text_Generation/Model/modelRT.h5")

filename = '/content/drive/MyDrive/Bangla_Text_Generation/Model/modelVnew.pickle'

import pickle
pickle.dump(model, open(filename, 'wb'))

import pickle
loaded_model = pickle.load(open(filename,'rb'))

import pickle
with open('/content/drive/MyDrive/Bangla_Text_Generation/Model/modelRT.pickle', 'wb') as md:
    pickle.dump(model, md, protocol=pickle.HIGHEST_PROTOCOL)

import pickle
# loading
with open('/content/drive/MyDrive/Bangla_Text_Generation/Model/modelVnew.pickle', 'rb') as md:
    model = pickle.load(md)

import pickle
with open('/content/drive/MyDrive/Bangla_Text_Generation/Model/tokenizerRT.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)

from keras.models import load_model
# load model
model = load_model("/content/drive/MyDrive/Bangla_Text_Generation/Model/modelRT.h5")

import pickle
# loading
with open('/content/drive/MyDrive/Bangla_Text_Generation/Model/tokenizerRT.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

seed_text = "তুমি কেমন করে গান কর যে গুণী"
next_words = 100
max_sequence_len = 40  
for _ in range(next_words):
	token_list = tokenizer.texts_to_sequences([seed_text])[0]
	token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
	predicted = model.predict_classes(token_list, verbose=0)
	output_word = ""
	for word, index in tokenizer.word_index.items():
		if index == predicted:
			output_word = word
			break
	seed_text += " " + output_word
print(seed_text)

print(tf.__version__)